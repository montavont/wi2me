# Copyright (c) 2012 Institut Mines-Telecom / Telecom Bretagne. All rights reserved.
#
# This file is part of Wi2Me.
#
# Wi2Me is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Wi2Me is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Wi2Me.  If not, see <http://www.gnu.org/licenses/>.
#


# This source modules parses sqlite databases generated by the wi2me android application 

import sqlite3
from wi2me.model.AP import AP, Network, Detection
from wi2me.model.ConnectionEvent import *
from wi2me.model.TransferredData import *
import SourceHelper
import inspect

import numpy as np

CSV_SEP = ","


TAG_SCAN = "WIFI"
TAG_GPS = "GPS"

class csvSource:
	def __init__(self, path):
		self.path = path
		self.origin = SourceHelper.ORIGIN_NS3
		self.name = SourceHelper.shortName(path)
		self.tags = []

	############################### Time related functions


        def _readlines(self, tags = [], timerange = []):
                retval = []
                f = open(self.path)
                    
                for l in f.readlines():
                    data = l.rstrip('\n').rstrip('\r').split(CSV_SEP)
                    if len(tags) == 0 or data[1] in tags:
                        ts = float(data[0])
                        if len(timerange) == 0 or (ts > timerange[0] and ts < timerange[1]):
                            retval.append(data)
                f.close()
                return retval

	#timestamp for the beginning of the mesurements
	def getStartTime(self):

                f = open(self.path)
                    
                l = f.readline()
                data = l.rstrip('\n').split(CSV_SEP)
                ts = int(data[0])

                f.close()
		return ts

	#timestamp for the end of the mesurements
	def getEndTime(self):
                f = open(self.path)
                for l in f.readlines():
                    pass

                data = l.rstrip('\n').split(CSV_SEP)
                ts = int(data[0])

                f.close()
		return ts


	#If the database contains multiple occurence where the app was started and stopped
	def getSessions(self):
		retval = []
                retval.append((self.getStartTime(), self.getEndTime()))
		return retval



	############################### Geolocalisation related functions

	#minimal and maximal latitude ant longitude in order to delimitate the place the mesurements took place in
	#The expected order is [lat_min, lat_max, long_min, long_max]
	def getExtremeCoordinates(self):
                lines = self._readlines([TAG_GPS])
                minlat = np.inf
                maxlat = -np.inf
                minlon = np.inf
                maxlon = -np.inf

                for res in lines:
                    _, _, lat, lon, _, _, _, _, _, _, _, _, _, _, _ = res
                   
                    lon = float(lon)
                    lat = float(lat)

                    if 0.0 not in [lon, lat]:
                        minlon = min(minlon, lon)
                        maxlon = max(maxlon, lon)
                        minlat = min(minlat, lat)
                        maxlat = max(maxlat, lat)

		return [minlat, maxlat, minlon, maxlon]

	#Get the total travelled distance in meters
	def getTravelledDistance(self):
                print(inspect.currentframe().f_code.co_name) + "    NO IMPLEMENTED "
		retval = 0
		return retval

	#Get the GPS coordinates of points contained in a certain timerange (or all of them)
	def getPoints(self, timeRange=None):
		if not timeRange:
			timeRange = [self.getStartTime(), self.getEndTime()]

		start, stop = timeRange
		Points = [] 

                for res in self._readlines([TAG_GPS], timerange = timeRange):
                    #1464240589,GPS,48.11401218,-1.573307712,2016-05-26T05:29:50.000Z,2016-05-26T05:29:50.000Z,59.842,7.86,2.215,8.437,0.005,19.144,0.257,105.0369,3
                    ts, _, lat, lon, _, _, _, _, _, _, _, _, _, _, _ = res
                    lon = float(lon)
                    lat = float(lat)
                    Points.append((lat, lon))


		return Points

	############################### Access point discovery related functions

	# get a list of list of scan results (one list for each attempt)
	# This function does not assume grouping by physical APs and will return a list of Networks
	def getScanResults(self, gpsRange=None):
		scans = {}
                lastTs = 0
                scanInd = 0

                for res in self._readlines([TAG_SCAN]):
                    if len(res) == 9:
                        timestamp, _, bssid, channel, _, _, rssi, _, ssid = res
                        timestamp = int(timestamp)
                        rssi = int(rssi)
    
                        if timestamp > lastTs:
                            scanInd += 1
                            lastTs = timestamp

                        if scanInd not in scans:
                            scans[scanInd] = {}

                        if bssid not in scans[scanInd]:
                            scans[scanInd][bssid] =  Network(bssid = bssid, ssid=ssid, detections=[Detection(source = SourceHelper.ORIGIN_CSV, timestamp = timestamp, rssi = rssi, scanInd = scanInd)])
                        else:
                            scans[scanInd][bssid].detections.append(Detection(source = SourceHelper.ORIGIN_CSV, timestamp = timestamp, rssi = rssi, scanInd = scanInd))

		return [u.values() for u in scans.values()]


	#Retrieve list of all APs seen in the trace
	# This Ill-named function does not group by physical APs and will return a list of Networks with detections corresponding to their ssid
	def getApList(self):
		retval = {}
                lastTs = 0
                scanInd = 0

                for res in self._readlines(TAG_SCAN):
                    if len(res) == 9:
                        timestamp, _, bssid, channel, _, _, rssi, _, ssid = res
                        timestamp = int(timestamp)
                        rssi = int(rssi)

                        if timestamp > lastTs:
                            scanInd += 1
                            lastTs = timestamp

                        if ssid not in retval:
                            retval[ssid] = Network(bssid = bssid, ssid=ssid, detections=[Detection(source = SourceHelper.ORIGIN_CSV, timestamp = timestamp, rssi = rssi, scanInd = scanInd)])
                        else:
                            retval[ssid].detections.append(Detection(source = SourceHelper.ORIGIN_CSV, timestamp = timestamp, rssi = rssi, scanInd = scanInd))

		return retval.values()


	#Return the number of scan attempts
	def countScans(self):
                print(inspect.currentframe().f_code.co_name) + "    NO IMPLEMENTED "
		retval = 0
		return retval


	############################### Device Event related functions


	#Get device connectivity events
	def getEvents(self, eventTypes):
                print(inspect.currentframe().f_code.co_name) + "    NO IMPLEMENTED "
		return []

	#Get device community network events
	def getCNEvents(self, eventTypes):
                print(inspect.currentframe().f_code.co_name) + "    NO IMPLEMENTED "
		return []

	############################### Transmitted Data related functions

	#Get a list of the data transfer events, with the associated AP
	def getTransferredData(self):
		retval = []
                print(inspect.currentframe().f_code.co_name) + "    NO IMPLEMENTED "
		return retval
